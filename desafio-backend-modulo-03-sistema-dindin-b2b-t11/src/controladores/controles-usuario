const pool = require('../conexao')
const bcrypt = require('bcrypt')

const cadastrarUsuario = async (req, res) => {
    const { nome, email, senha } = req.body

    try {
        if (!nome || !email || !senha) {
            return res.status(404).json({ mensagem: 'Todos os dados devem ser preenchidos' })
        }
        const emailExiste = await pool.query('select * from usuarios where email = $1', [email])

        if (emailExiste.rowCount > 0) {
            return res.status(404).json({ mensagem: 'email já cadastrado' })
        }
        const senhaCriptografada = await bcrypt.hash(senha, 10)
        const query = 'insert into usuarios (nome, email, senha) values ($1, $2, $3) returning *'

        const { rows } = await pool.query(query, [nome, email, senhaCriptografada])

        const { senha: _, ...usuario } = rows[0]

        return res.status(201).json(usuario)

    } catch (error) {
        return res.status(404).json({ mensagem: 'O servidor não pode encontrar o recurso solicitado' })
    }
}

const detalharPerfilUsuarioLogado = async (req, res) => {
    const { senha: _, ...usuario } = req.usuario

    try {
        return res.status(200).json(usuario)

    } catch (error) {
        return res.status(404).json({ mensagem: 'O servidor não pode encontrar o recurso solicitado' })
    }
}

const atualizarUsuario = async (req, res) => {
    const { id } = req.usuario

    const { nome, email, senha } = req.body

    try {
        if (!nome || !email || !senha) {
            return res.status(400).json({ mensagem: 'Todos os campos devem ser preenchidos' })
        }
        const usuario = await pool.query('select * from usuarios where email = $1', [email])

        if (usuario.rowCount > 0) {
            return res.status(400).json({ mensagem: 'Email já sendo utilizado por outro usuario' })
        }
        const senhaCriptografada = await bcrypt.hash(senha, 10)

        const queryAtaulizarUsuario = 'update usuarios set nome = $1, email = $2, senha = $3 where id = $4'

        await pool.query(queryAtaulizarUsuario, [nome, email, senhaCriptografada, id])

        return res.status(204).send()

    } catch (error) {
        return res.status(404).json({ mensagem: 'O servidor não pode encontrar o recurso solicitado' })
    }
}

const listarCategorias = async (req, res) => {
    try {
        const categorias = await pool.query('select * from categorias')
        const { rows } = categorias
        return res.status(200).json(rows)
    } catch {
        return res.status(404).json({ mensagem: 'O servidor não pode encontrar o recurso solicitado' })
    }
}

const listarTrancacoesDoUsuarioLogado = async (req, res) => {
    const { id } = req.params
    const { filtro } = req.query
    let transacoesFiltradas = []
    try {

        const { rows } = await pool.query(`select t.id as transacaoId, t.tipo, t.descricao, t.valor, t.data, t.usuario_id, t.categoria_id, 
        c.descricao as categoria_nome from transacoes t left join categorias c on t.categoria_id = c.id where t.usuario_id = $1`, [req.usuario.id])

        if (filtro) {
            for (categoria of filtro) {
                let filter = rows.filter((transacao) => {
                    return transacao.categoria_nome.toLowerCase() === categoria.toLowerCase()
                })
                transacoesFiltradas.push(...filter)
            }
        }
        return res.json(filtro ? transacoesFiltradas : rows)

    } catch (error) {
        return res.status(404).json({ mensagem: 'O servidor não pode encontrar o recurso solicitado' })
    }
}

const detalharTrancacaoDoUsuarioLogado = async (req, res) => {
    const { id } = req.params

    try {
        const transacoes = await pool.query('select * from transacoes where usuario_id = $1 and id = $2', [req.usuario.id, id])

        if (!transacoes) {
            return res.status(404).json("Não encontrado transçoes para o usuario informado")
        }
        return res.status(200).json(transacoes.rows)

    } catch (error) {
        return res.status(404).json({ mensagem: 'O servidor não pode encontrar o recurso solicitado' })
    }
}

const cadastrarTransacaoDoUsuarioLogado = async (req, res) => {
    const { descricao, valor, data, categoria_id, tipo } = req.body

    try {
        if (!descricao || !valor || !data || !categoria_id || !tipo) {
            return res.send({ mensagem: 'Todos os dados devem ser preenchidos' })
        }
        const categoriaExiste = await pool.query('select * from categorias where id = $1', [categoria_id])

        if (!categoriaExiste) {
            return res.status(404).json({ mensagem: 'O servidor não pode encontrar o recurso solicitado' })
        }

        if (tipo != 'entrada' && tipo != 'saida') {
            return res.status(404).json('Informar tipo correto')
        }
        const query = 'insert into transacoes (tipo, descricao, valor, data, categoria_id, usuario_id) values ($1, $2, $3, $4, $5, $6)'
        const { rows } = await pool.query(query, [tipo, descricao, valor, data, categoria_id, req.usuario.id])
        const resultado = { tipo, descricao, valor, data, categoria_id, usuario_id: req.usuario.id }
        return res.status(201).json(resultado)

    } catch (error) {

        return res.status(404).json({ mensagem: 'O servidor não pode encontrar o recurso solicitado' })
    }
}

const atualizarTransacaoDoUsuarioLogado = async (req, res) => {
    const { id } = req.params
    const { descricao, valor, data, categoria_id, tipo } = req.body

    try {
        if (!descricao || !valor || !data || !categoria_id || !tipo) {
            return res.send({ mensagem: 'Todos os dados devem ser preenchidos' })
        }
        const categoriaExiste = await pool.query('select * from categorias where id = $1', [categoria_id])

        if (!categoriaExiste) {
            return res.status(404).json({ mensagem: 'categoria não cadastrada' })
        }

        if (tipo != 'entrada' && tipo != 'saida') {
            return res.status(404).json('Informar tipo correto')
        }
        const transacoes = await pool.query('select * from transacoes where usuario_id = $1 and id = $2', [req.usuario.id, id])

        if (!transacoes) {
            return res.status(404).json("Não encontrado transações para o usuario informado")
        }

        const queryAtaulizarTransacao = 'update transacoes set descricao = $1, valor = $2, data = $3, categoria_id = $4, tipo = $5 where id = $6'

        await pool.query(queryAtaulizarTransacao, [descricao, valor, data, categoria_id, tipo, id])

        return res.status(200).json('Atualização efetivada com sucesso')

    } catch (error) {
        return res.status(404).json({ mensagem: 'O servidor não pode encontrar o recurso solicitado' })
    }
}

const excluirTransacaoDoUsuarioLogado = async (req, res) => {
    const { id } = req.params

    try {
        const transacoes = await pool.query('select descricao, valor, data, categoria_id, tipo from transacoes where id = $1 and usuario_id = $2',
            [req.usuario.id, id])

        if (!transacoes) {
            return res.status(404).json("Não encontrado transações para o usuario informado")
        }
        const queryApagarTransacao = 'delete from transacoes where id = $1'

        await pool.query(queryApagarTransacao, [id])

        return res.status(204).json('Transação excluída')

    } catch (error) {
        return res.status(404).json({ mensagem: 'O servidor não pode encontrar o recurso solicitado' })
    }
}

const obterExtratoDeTransacoes = async (req, res) => {
    try {
        const transacoes = await pool.query('select descricao, valor, data, categoria_id, tipo from transacoes where usuario_id = $1',
            [req.usuario.id])

        if (!transacoes) {
            return res.status(404).json("Não encontrado transações para o usuario informado")
        }
        let entrada = 0;
        let saida = 0
        for (let transacao of transacoes.rows) {
            if (transacao.tipo === "saida") {
                saida = saida + transacao.valor
            } else {
                entrada = entrada + transacao.valor
            }
        }
        return res.status(201).json({ 'Entrada': entrada, 'Saida': saida })

    } catch (error) {
        return res.status(404).json('O servidor não pode encontrar o recurso solicitado')
    }
}

module.exports = {
    cadastrarUsuario,
    detalharPerfilUsuarioLogado,
    atualizarUsuario,
    listarCategorias,
    listarTrancacoesDoUsuarioLogado,
    detalharTrancacaoDoUsuarioLogado,
    cadastrarTransacaoDoUsuarioLogado,
    atualizarTransacaoDoUsuarioLogado,
    excluirTransacaoDoUsuarioLogado,
    obterExtratoDeTransacoes,
}