const pool = require('../conexao')
const bcrypt = require('bcrypt')
const jwt = require('jsonwebtoken')
const senhaJwt = require('./senhaJwt')


const cadastrarUsuario = async (req, res) => {
    const { nome, email, senha } = req.body

    try {
        if (!nome || !email || !senha) {
            return res.send({ mensagem: 'Todos os dados devem ser preenchidos' })
        }
        const emailExiste = await pool.query('select * from usuarios where email = $1', [email])

        if (emailExiste.rowCount > 0) {
            return res.status(404).json({ mensagem: 'email já cadastrado' })
        }
        const senhaCriptografada = await bcrypt.hash(senha, 10)
        const query = 'insert into usuarios (nome, email, senha) values ($1, $2, $3) returning *'

        const { rows } = await pool.query(query, [nome, email, senhaCriptografada])

        const { senha: _, ...usuario } = rows[0]
        return res.status(201).json(usuario)

    } catch (error) {
        return res.status(500).json({ mensagem: 'Erro interno do Servidor' })
    }
}

const loginUsuario = async (req, res) => {
    const { email, senha } = req.body

    try {

        const usuario = await pool.query('select * from usuarios where email = $1', [email])

        if (rowCount === 0) {
            return res.status(400).json({ mensagem: 'Email ou senha inválida' })
        }
        const senhaValida = await bcrypt.compare(senha, usuario.rows[0].senha)

        if (!senhaValida) {
            return res.status(400).json({ mensagem: 'Email ou senha inválida' })
        }

        const token = jwt.sign({ id: usuario.id }, senhaJwt, { expiresIn: '12h' })

        const { senha: _, ...usuarioLogado } = usuario.rows[0]

        return res.status(201).json({ usuario: usuarioLogado, token })



    } catch (error) {
        console.log(error)
        return res.status(404).json({ mensagem: 'Erro interno do Servidor' })
    }
}




module.exports = {
    cadastrarUsuario,
    loginUsuario
}